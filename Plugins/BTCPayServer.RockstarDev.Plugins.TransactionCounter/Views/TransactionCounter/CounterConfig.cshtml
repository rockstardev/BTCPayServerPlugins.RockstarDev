@using System.Globalization
@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.RockstarDev.Plugins.TransactionCounter
@model BTCPayServer.RockstarDev.Plugins.TransactionCounter.ViewModels.CounterConfigViewModel
@{
    Layout = "_Layout";
    ViewData.SetActivePage(PluginNavPages.Counter, "Stores Transaction Counter");
	var excludedIds = (Model.ExcludedStoreIds ?? "").Split(",", StringSplitOptions.RemoveEmptyEntries).Select(id => id.Trim()).ToHashSet();
}

@section PageHeadContent {
    <style>
        input[type="checkbox"] ~ div > .info-note,
        input[type="checkbox"] ~ div > .subsettings {
            display: none;
        }

        input[type="checkbox"]:checked ~ div > .info-note {
            display: flex;
            max-width: 44em;
        }

        input[type="checkbox"]:checked ~ div > .subsettings {
            display: block;
        }

        .subsettings > :last-child {
            margin-bottom: 0 !important;
        }
    </style>
}

<form method="post">
	<div class="sticky-header d-flex align-items-center justify-content-between">
		<h2>@ViewData["Title"]</h2>
		<button id="page-primary" type="submit" class="btn btn-primary" name="command" value="Save">Save</button>
	</div>
	<partial name="_StatusMessage" />

	<ul class="nav nav-tabs" id="tabMenu" role="tablist">
		<li class="nav-item">
			<a class="nav-link active" id="settings-tab" data-bs-toggle="tab" href="#settings" role="tab">Settings</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" id="stores-tab" data-bs-toggle="tab" href="#stores" role="tab">Stores</a>
		</li>
	</ul>

	<div class="tab-content">
		<div class="tab-pane fade show active" id="settings" role="tabpanel">

			<div class="form-group my-3">
				<input asp-for="Enabled" type="checkbox" class="btcpay-toggle" />
				<label asp-for="Enabled" class="form-label ms-2"></label>
				<small class="form-text text-muted d-block ms-5">
					This will display the transaction count of all stores.
					<a asp-controller="PublicCounter" asp-action="Counter" target="_blank">Click this link</a> to view transaction count.
					<a asp-controller="PublicCounter" asp-action="ApiCounter" target="_blank">Click this link</a> to view transaction count API.
				</small>
			</div>

			<div class="form-group mt-3">
				<label class="form-label">Stores participating in count</label>
				<a href="#" onclick="document.getElementById('stores-tab').click(); return false;" class="ms-2">
					@(string.IsNullOrWhiteSpace(Model.ExcludedStoreIds) ? "All" : $"{Model.Stores.Length - excludedIds.Count} Store(s)")
				</a>
				<div class="mb-0">
					<small class="form-text text-muted">
						Click the value to manage store selection in the Stores tab.
					</small>
				</div>
			</div>

			<div class="d-flex align-items-center my-3">
				<input type="checkbox" asp-for="IncludeArchived" class="btcpay-toggle me-3" />
				<label class="form-check-label" asp-for="IncludeArchived" text-translate="true"></label>
			</div>

			<div class="d-flex align-items-center my-3">
				<input type="checkbox" asp-for="IncludeTransactionVolume" class="btcpay-toggle me-3" />
				<label class="form-check-label" asp-for="IncludeTransactionVolume" text-translate="true"></label>
			</div>

			<div class="d-flex my-3">
				<div class="form-group mb-0 w-250px">
					<label asp-for="StartDate" class="form-label"></label>
					<div class="input-group flex-nowrap">
						<input type="datetime-local" asp-for="StartDate"
							   value="@(Model.StartDate.ToString("u", CultureInfo.InvariantCulture))"
							   class="form-control flatdtpicker"
							   placeholder="No start date has been set" />
						<button class="btn btn-secondary input-group-clear px-3" type="button"
								title="Clear">
							<vc:icon symbol="close" />
						</button>
					</div>
				</div>
				<div class="form-group mb-0 w-250px ms-3">
					<label asp-for="EndDate" class="form-label"></label>
					<div class="input-group flex-nowrap">
						<input type="datetime-local" asp-for="EndDate"
							   value="@(Model.EndDate?.ToString("u", CultureInfo.InvariantCulture))"
							   class="form-control flatdtpicker"
							   placeholder="No end date has been set" />
						<button class="btn btn-secondary input-group-clear px-3" type="button"
								title="Clear">
							<vc:icon symbol="close" />
						</button>
					</div>
				</div>
				<span asp-validation-for="StartDate" class="text-danger"></span>
				<span asp-validation-for="EndDate" class="text-danger"></span>
			</div>

			<div class="form-group w-50">
				<label asp-for="Password" class="form-label"></label>
				<input asp-for="Password" class="form-control" />
				<span asp-validation-for="Password" class="text-danger"></span>
			</div>

			<div class="form-group w-75">
				<label asp-for="HtmlTemplate" class="form-label"></label>
				<textarea asp-for="HtmlTemplate" class="form-control" rows="10"></textarea>
				<small class="form-text text-muted">
					Use <code>{COUNTER}</code> where the number should be inserted.
					To see usage, reference <a asp-action="DefaultHtmlTemplate">Default HTML Template</a>
				</small>
			</div>

			<div class="form-group mt-4 w-75">
				<label asp-for="ExtraTransactions" class="form-label"></label>
				<small class="form-text text-muted">
					Add manual transactions as a JSON array. Must be a valid JSON array. Times are in UTC.
				</small>
				<textarea asp-for="ExtraTransactions"
						  id="extra-transactions-json"
						  class="form-control"
						  rows="8"
						  placeholder="[{count1},{count2}]"></textarea>
				<small id="emailHelp" class="form-text text-muted">
					Example:[{"source": "bar", "start": "2025-06-19T14:00:00Z", "end":
					"2025-06-21T17:00:00Z", "count": 100, "currency": "USD", "amount": 21}]
				</small>
				<span asp-validation-for="ExtraTransactions" class="text-danger"></span>
				<div class="mt-2 d-flex align-items-center">
					<button type="button" class="btn btn-sm btn-secondary me-2" onclick="validateAndPreview()">Test JSON</button>
					<small id="json-feedback-text" class="form-text"></small>
				</div>
			</div>
		</div>

		<div class="tab-pane fade" id="stores" role="tabpanel">
			<div class="form-group mt-3 w-100" id="store-selection">
				<div class="w-25">
					@foreach (var store in Model.Stores)
					{
						var isExcluded = excludedIds.Contains(store.Id);
						<div class="d-flex justify-content-between align-items-center py-2">
							<span>@store.StoreName</span>
							<input type="checkbox" class="btcpay-toggle store-toggle-input" data-id="@store.Id" value="true" @(isExcluded ? "" : "checked") />
						</div>
					}
				</div>
			</div>
			<div class="form-group mt-3 w-50">
				<label>Excluded Store IDs</label>
				<textarea id="excluded-store-ids" name="ExcludedStoreIds" class="form-control" rows="3">@Model.ExcludedStoreIds</textarea>
			</div>
		</div>
	</div>
</form>

@section PageFootContent {
	<script>
		function validateAndPreview() {
			const input = document.getElementById("extra-transactions-json").value;
			const feedbackText = document.getElementById("json-feedback-text");
			try {
				const data = JSON.parse(input);
				if (!Array.isArray(data)) throw new Error("Input must be a JSON array.");
				data.forEach((item, index) => {
					if (!item.source || !item.start || !item.end || typeof item.count !== 'number')
						throw new Error(`Missing or invalid properties in entry ${index + 1}`);
				});
				feedbackText.textContent = "JSON is valid.";
				feedbackText.className = "form-text text-success";
			} catch (err) {
				feedbackText.textContent = "Invalid JSON: " + err.message;
				feedbackText.className = "form-text text-danger";
			}
		}

		document.querySelectorAll(".store-toggle-input").forEach(input => {
			input.addEventListener("change", () => {
				const ids = Array.from(document.querySelectorAll(".store-toggle-input"))
					.filter(el => !el.checked)
					.map(el => el.getAttribute("data-id"));
				document.getElementById("excluded-store-ids").value = ids.join(",");
			});
		});

		document.getElementById("excluded-store-ids").addEventListener("input", () => {
			const excluded = document.getElementById("excluded-store-ids").value.split(",").map(s => s.trim());
			document.querySelectorAll(".store-toggle-input").forEach(input => {
				input.checked = !excluded.includes(input.getAttribute("data-id"));
			});
		});
	</script>
}
