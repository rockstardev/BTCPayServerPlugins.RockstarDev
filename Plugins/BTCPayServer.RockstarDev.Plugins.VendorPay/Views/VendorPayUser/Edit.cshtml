@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.RockstarDev.Plugins.VendorPay.ViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IScopeProvider ScopeProvider
@model VendorPayUserCreateViewModel
@{
    Layout = "_Layout"; // adding so PageFootContent section is detected
    ViewData.SetActivePage("VendorPay", "Edit Vendor Pay User", "VendorPay");
    var storeId = ScopeProvider.GetCurrentStoreId();

    bool IsValidReminderDate(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) return false;
        if (int.TryParse(value, out int num))
        {
            return num >= 1 && num <= 31;
        }
        return false;
    }

    var initialReminders = (Model.EmailReminder ?? "").Split(',')
        .Where(r => !string.IsNullOrWhiteSpace(r)).Select(r => r.Trim())
        .Where(IsValidReminderDate).Distinct()
        .OrderBy(r => int.Parse(r)).ToList();
}

<form method="post" asp-action="Edit">
    <div class="sticky-header d-flex align-items-center justify-content-between">
        <h2 class="mb-0">@ViewData["Title"]</h2>
        <input type="submit" value="Save Changes" class="btn btn-primary" id="Edit" />
    </div>

    <partial name="_StatusMessage" />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Name" class="form-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="form-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="form-label">Password</label>
                <div class="input-group">
                    <input asp-for="Password" class="form-control" placeholder="***********" readonly />
                    <div class="input-group-append">
                        <a asp-controller="VendorPayUser" asp-action="ResetPassword" asp-route-userId="@Model.Id"
                           asp-route-storeId="@storeId" class="btn btn-secondary">Reset Password</a>
                    </div>
                </div>
            </div>


            <div class="form-group">
                <label asp-for="EmailReminder" class="form-label"></label>
                <div class="input-group mb-3">
                    <input type="number" id="reminderInput" class="form-control" placeholder="Enter date (1-31)" min="1" max="31" />
                    <button type="button" id="addReminder" class="btn btn-secondary">Add</button>
                </div>
                @if (!Model.StoreEmailSettingsConfigured)
                {
                    <div class="text-secondary">
                        <span>Store Email Settings needs to be configured for reminders to work</span>
                    </div>
                }
                <div id="reminderList" class="d-flex flex-wrap align-items-center gap-2">
                    @foreach (var reminder in initialReminders)
                    {
                        <span class="badge bg-secondary me-1 mb-1 role-button cursor-pointer" data-value="@reminder">
                            @reminder
                        </span>
                    }
                </div>
                <input type="hidden" id="EmailReminder" asp-for="EmailReminder" value="@string.Join(",", initialReminders)" />
                <div id="validationMessage" class="text-danger mt-2"></div>
            </div>

        </div>
    </div>
</form>

@section PageFootContent {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const reminderInput = document.getElementById("reminderInput");
            const addReminderButton = document.getElementById("addReminder");
            const reminderList = document.getElementById("reminderList");
            const hiddenInput = document.getElementById("EmailReminder");
            const validationMessage = document.getElementById("validationMessage");

            function isValidReminderDate(value) {
                const num = parseInt(value, 10);
                return !isNaN(num) && num >= 1 && num <= 31;
            }

            function updateHiddenInput() {
                const selectedValues = Array.from(reminderList.querySelectorAll(".role-button"))
                    .map(badge => badge.getAttribute("data-value"))
                    .filter(val => val);
                hiddenInput.value = selectedValues.join(",");
            }

            addReminderButton.addEventListener("click", function () {
                const value = reminderInput.value.trim();

                if (!value) {
                    validationMessage.textContent = "Please enter a date";
                    return;
                }

                if (!isValidReminderDate(value)) {
                    validationMessage.textContent = "Please enter a valid date between 1 and 31";
                    return;
                }

                const existingValues = hiddenInput.value.split(",");
                if (existingValues.includes(value)) {
                    validationMessage.textContent = "This date is already added";
                    return;
                }

                const badge = document.createElement("span");
                badge.classList.add("badge", "bg-secondary", "me-1", "mb-1", "role-button", "cursor-pointer");
                badge.setAttribute("data-value", value);
                badge.textContent = value;

                reminderList.appendChild(badge);
                updateHiddenInput();
                reminderInput.value = "";
                validationMessage.textContent = "";
            });

            reminderInput.addEventListener("keypress", function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    addReminderButton.click();
                }
            });

            reminderList.addEventListener("click", function (e) {
                if (e.target.classList.contains("role-button")) {
                    e.target.remove();
                updateHiddenInput();
                }
            });
        });
    </script>
}