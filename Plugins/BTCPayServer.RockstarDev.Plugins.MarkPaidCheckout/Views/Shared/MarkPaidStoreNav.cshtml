@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Data
@using BTCPayServer.Payments
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager;
@inject IScopeProvider ScopeProvider
@inject MarkPaidStatusProvider StatusProvider
@{
    var storeId = ScopeProvider.GetCurrentStoreId();
}
@if (SignInManager.IsSignedIn(User) && !string.IsNullOrEmpty(storeId))
{
    var registry = Context.RequestServices.GetService(typeof(MarkPaidMethodsRegistry)) as MarkPaidMethodsRegistry;
    var path = Context.Request.Path.Value ?? string.Empty;
    if (registry is not null)
    {
        foreach (var method in registry.Methods)
        {
            var isActive = path?.TrimEnd('/').EndsWith($"/markpaid/method/{method}", StringComparison.OrdinalIgnoreCase) ?? false;
            var isEnabled = await StatusProvider.IsEnabled(storeId, new PaymentMethodId(method));
            <li class="nav-item">
                <a class="nav-link @(isActive ? "active" : "")"
                   asp-route-storeId="@storeId"
                   asp-route-method="@method"
                   asp-action="MethodConfig"
                   asp-controller="MarkPaidStore">
                    <span class="me-2 btcpay-status btcpay-status--@(isEnabled ? "enabled" : "pending")"></span>
                    <span>@method</span>
                </a>
            </li>
        }
    }
}
