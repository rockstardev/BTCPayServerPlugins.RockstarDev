@using BTCPayServer.Blazor.VaultBridge
@using BTCPayServer.Blazor.VaultBridge.Elements
@using Microsoft.Extensions.Localization
@using NBitcoin
@inherits VaultElement

<div id="vault-xpub" class="mt-4">
    <div class="form-group">
        <label for="signatureType" class="form-label">@ui.StringLocalizer["Signature type"]</label>
        <select id="signatureType" @bind="SignatureType" name="signatureType" class="form-select w-auto">
            <option value="singlesig">@ui.StringLocalizer["Singlesig"]</option>
            <option value="multisig">@ui.StringLocalizer["Multisig"]</option>
            <option value="custom">@ui.StringLocalizer["Custom"]</option>
        </select>
    </div>
    
    @if (SignatureType == "custom")
    {
        <div class="form-group">
            <label for="customKeyPath" class="form-label">@ui.StringLocalizer["Key path"]</label>
            <input id="customKeyPath" @bind="CustomKeyPath" class="form-control" name="customKeyPath" type="text" style="max-width:30ch;"
                   placeholder="Enter custom path (e.g. m/84'/0'/4')"/>
            @if (Error != "")
            {
                <span class="text-danger">@Error</span>
            }
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="addressType" class="form-label">@ui.StringLocalizer["Address type"]</label>
            <select id="addressType" @bind="AddressType" name="addressType" class="form-select w-auto">
                @if (CanUseSegwit)
                {
                    <option value="segwit">@ui.StringLocalizer["Segwit (Recommended, cheapest fee)"]</option>
                    <option value="segwitWrapped">@ui.StringLocalizer["Segwit wrapped (Compatible with old wallets)"]</option>
                }
                <option value="legacy">@ui.StringLocalizer["Legacy (Not recommended)"]</option>
                @if (CanUseTaproot)
                {
                    <option value="taproot" text-translate="true">@ui.StringLocalizer["Taproot"]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="accountNumber" class="form-label" text-translate="true">Account</label>
            <input id="accountNumber" @bind="AccountNumber" class="form-control" name="accountNumber" type="number" min="0" step="1"
                   style="max-width:12ch;" />
        </div>
    }
</div>
<button id="vault-confirm" class="btn btn-primary mt-4" type="button" @onclick="OnConfirmXPubClick">@ui.StringLocalizer["Confirm"]</button>

@code {
    private readonly VaultBridgeUI ui;

    public XPubSelectorVaultElement(VaultBridgeUI ui, Network network)
    {
        this.ui = ui;
        Network = network;
        CanUseSegwit = network.Consensus.SupportSegwit;
        AddressType = CanUseSegwit ? "segwit" : "legacy";
    }

    public Network Network { get; set; }

    public KeyPath ToKeyPath()
        => (SignatureType, ToScriptPubKeyType()) switch
        {
            ("singlesig", ScriptPubKeyType.TaprootBIP86) => new KeyPath("86'"),
            ("singlesig", ScriptPubKeyType.Segwit) => new KeyPath("84'"),
            ("singlesig", ScriptPubKeyType.SegwitP2SH) => new KeyPath("49'"),
            ("singlesig", _) => new KeyPath("44'"),
            
            ("multisig", ScriptPubKeyType.TaprootBIP86) => new KeyPath("48'"),
            ("multisig", ScriptPubKeyType.Segwit) => new KeyPath("48'"),
            ("multisig", ScriptPubKeyType.SegwitP2SH) => new KeyPath("48'"),
            ("multisig", _) => new KeyPath("45'"),
            
            ("custom", _) => CustomParsedKeyPath,
            _ => throw new NotSupportedException($"BUG {SignatureType} {ToScriptPubKeyType()}")
        };

    public KeyPath CustomParsedKeyPath { get; set; }

    public ScriptPubKeyType ToScriptPubKeyType()
        => AddressType switch
        {
            "segwit" => ScriptPubKeyType.Segwit,
            "segwitWrapped" => ScriptPubKeyType.SegwitP2SH,
            "taproot" => ScriptPubKeyType.TaprootBIP86,
            _ => ScriptPubKeyType.Legacy
        };

    public string CustomKeyPath { get; set; }
    public string AddressType { get; set; }
    string _SignatureType = "multisig";
    public string SignatureType
    {
        get { return _SignatureType; }
        set { _SignatureType = value; ui.StateHasChanged(); }
    }
    public int AccountNumber { get; set; }
    public bool CanUseTaproot => this.Network.Consensus.SupportTaproot && SignatureType == "singlesig";
    public bool CanUseSegwit { get; }
    public bool IsMultiSig => SignatureType == "multisig";
    public bool IsCustom => SignatureType == "custom";

    TaskCompletionSource<XPubSelectorVaultElement> _cts;

    public Task<XPubSelectorVaultElement> GetXPubSelect()
    {
        ui.ShowFeedback(FeedbackType.Loading, ui.StringLocalizer["Select your address type and account"]);
        ui.AddElement(this);
        _cts = new TaskCompletionSource<XPubSelectorVaultElement>(TaskCreationOptions.RunContinuationsAsynchronously);
        return _cts.Task;
    }

    public void OnConfirmXPubClick()
    {
        if (SignatureType == "custom")
        {
            if (!KeyPath.TryParse(this.CustomKeyPath ?? "", out var kp))
            {
                Error = ui.StringLocalizer["Invalid keypath"].Value;
                ui.StateHasChanged();
                return;
            }
            CustomParsedKeyPath = kp;
        }
        ui.Elements.Remove(this);
        ui.Elements.RemoveAt(ui.Elements.Count - 1);
        ui.StateHasChanged();
        _cts?.TrySetResult(this);
        _cts = null;
    }

    public string Error { get; set; } = "";

    public void Dispose() => _cts?.TrySetCanceled();
}
