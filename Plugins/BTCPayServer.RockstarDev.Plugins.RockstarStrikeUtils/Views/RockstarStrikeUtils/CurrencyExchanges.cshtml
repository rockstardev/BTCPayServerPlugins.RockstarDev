@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.Extensions
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Strike.Client.Models
@model CurrencyExchangesViewModel
@inject IScopeProvider ScopeProvider
@{
    var storeId = ScopeProvider.GetCurrentStoreId();
    ViewData.SetActivePage(RockstarStrikeUtilsPlugin.PluginStrikeNavKey, "Currency Exchanges", "CurrencyExchanges");
}

<form method="post">
    <div class="sticky-header-setup"></div>
    <div class="sticky-header d-sm-flex align-items-center justify-content-between">
        <h2 class="mb-0">@ViewData["Title"]</h2>
        @* <div class="d-flex gap-3 mt-3 mt-sm-0"> *@
        @*     <a asp-controller="RockstarStrikeUtils" asp-action="ReceiveRequestsCreate" class="btn btn-primary">Create Receive Request</a> *@
        @* </div> *@
    </div>
</form>

<partial name="_StatusMessage" />

<h4>Balances</h4>

<div class="table-responsive-md">
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">Currency</th>
            <th scope="col">Available</th>
            <th scope="col">Outgoing</th>
            <th scope="col">Total</th>
            <th scope="col" class="text-end"></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model.Balances)
        {
            <tr class="mass-action-row">
                <td>@item.Currency</td>
                <td>@item.Available</td>
                <td>@item.Outgoing</td>
                <td>@item.Total</td>
                <td class="text-end">
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<h4>Exchanges</h4>
<form method="get" action="CurrencyExchanges">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Operation" class="form-label"></label>
                <select asp-for="Operation" class="form-control" id="OperationSelect">
                    <option value="BuyBitcoin">Buy Bitcoin</option>
                    <option value="SellBitcoin">Sell Bitcoin</option>
                </select>
                <span asp-validation-for="Operation" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Amount" class="form-label" id="AmountLabel"></label>
                <input asp-for="Amount" class="form-control" placeholder="Amount" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="form-group mt-4">
                <input type="submit" class="btn btn-primary" id="Submit" asp-route-storeId="@storeId" value="Request Quote" />
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const operationSelect = document.querySelector('#OperationSelect');
            const amountLabel = document.querySelector('#AmountLabel');

            function updateAmountLabel() {
                if (operationSelect.value === 'BuyBitcoin') {
                    amountLabel.textContent = 'Amount (USD)';
                } else if (operationSelect.value === 'SellBitcoin') {
                    amountLabel.textContent = 'Amount (BTC)';
                }
            }

            operationSelect.addEventListener('change', updateAmountLabel);
            updateAmountLabel(); // Initial call to set the label based on the initial value
        });
    </script>
</form>

@if (Model.Quote != null)
{
    <h4>Active Quote Conversion</h4>
    var quote = Model.Quote;
    <form method="post" action="CurrencyExchangesProcess">
        <div class="row">
            <div class="col-md-6">
                @if (quote.Source.Currency == Currency.Usd && quote.Target.Currency == Currency.Btc)
                {
                    <div class="form-group">
                        <div>Buy @quote.Target.Amount.ToString("N8") Bitcoin for @quote.Source.Amount.ToString("N2") USD</div>
                        <div>Exchange Rate:
                            @{ var invertedRate = 1 / quote.ConversionRate.Amount;}
                            @invertedRate.ToString("N2")
                        </div>
                    </div>
                }

                @if (quote.Source.Currency == Currency.Btc && quote.Target.Currency == Currency.Usd)
                {
                    <div class="form-group">
                        <div>Sell @quote.Source.Amount.ToString("N8") Bitcoin for @quote.Target.Amount.ToString("N2") USD</div>
                        <div>Exchange Rate:
                            @quote.ConversionRate.Amount.ToString("N2")
                        </div>
                    </div>
                }
                
                <input type="hidden" name="QuoteId" value="@quote.Id" />
                
                <div class="form-group mt-4">
                    <input type="submit" class="btn btn-primary" asp-route-storeId="@storeId" value="Execute Conversion"/>
                </div>
            </div>
        </div>
    </form>
}
